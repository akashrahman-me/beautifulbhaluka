package com.akash.beautifulbhaluka.presentation.screens.bloodbank.guidelines

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.animateContentSize
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.animation.expandVertically
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.*
import androidx.compose.material.icons.outlined.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BloodDonationGuidelinesScreen(
    viewModel: BloodDonationGuidelinesViewModel = viewModel(),
    onNavigateBack: () -> Unit = {}
) {
    val uiState by viewModel.uiState.collectAsState()

    BloodDonationGuidelinesContent(
        uiState = uiState,
        guidelineData = viewModel.guidelineData,
        onAction = viewModel::onAction,
        onNavigateBack = onNavigateBack
    )
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BloodDonationGuidelinesContent(
    uiState: BloodDonationGuidelinesUiState,
    guidelineData: GuidelineData,
    onAction: (GuidelinesAction) -> Unit,
    onNavigateBack: () -> Unit
) {
    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(12.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Box(
                            modifier = Modifier
                                .size(36.dp)
                                .background(
                                    brush = Brush.linearGradient(
                                        colors = listOf(
                                            Color(0xFFE53935),
                                            Color(0xFFFF6B6B)
                                        )
                                    ),
                                    shape = CircleShape
                                ),
                            contentAlignment = Alignment.Center
                        ) {
                            Text(
                                text = "ü©∏",
                                fontSize = 18.sp
                            )
                        }
                        Text(
                            text = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ",
                            fontWeight = FontWeight.Bold
                        )
                    }
                },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Back"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .verticalScroll(rememberScrollState())
                .padding(horizontal = 16.dp, vertical = 20.dp),
            verticalArrangement = Arrangement.spacedBy(20.dp)
        ) {
            // Hero Card
            HeroCard()

            // Before Donation Section
            ExpandableSection(
                title = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá ‡¶ï‡¶∞‡¶£‡ßÄ‡¶Ø‡¶º",
                icon = Icons.Outlined.EventAvailable,
                gradientColors = listOf(Color(0xFF2196F3), Color(0xFF42A5F5)),
                items = guidelineData.beforeDonation,
                expanded = uiState.expandedSections.contains(GuidelineSection.BEFORE_DONATION),
                onToggle = { onAction(GuidelinesAction.ToggleSection(GuidelineSection.BEFORE_DONATION)) }
            )

            // During Donation Section
            ExpandableSection(
                title = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡¶∞‡¶£‡ßÄ‡¶Ø‡¶º",
                icon = Icons.Outlined.LocalHospital,
                gradientColors = listOf(Color(0xFF4CAF50), Color(0xFF66BB6A)),
                items = guidelineData.duringDonation,
                expanded = uiState.expandedSections.contains(GuidelineSection.DURING_DONATION),
                onToggle = { onAction(GuidelinesAction.ToggleSection(GuidelineSection.DURING_DONATION)) }
            )

            // After Donation Section
            ExpandableSection(
                title = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡ßá ‡¶ï‡¶∞‡¶£‡ßÄ‡¶Ø‡¶º",
                icon = Icons.Outlined.CheckCircle,
                gradientColors = listOf(Color(0xFFFF9800), Color(0xFFFFB74D)),
                items = guidelineData.afterDonation,
                expanded = uiState.expandedSections.contains(GuidelineSection.AFTER_DONATION),
                onToggle = { onAction(GuidelinesAction.ToggleSection(GuidelineSection.AFTER_DONATION)) }
            )

            // Health Benefits Section
            HealthBenefitsSection()

            // Eligibility Criteria Section
            EligibilityCriteriaSection()

            // Patient Family Section
            PatientFamilyGuideSection()

            Spacer(modifier = Modifier.height(20.dp))
        }
    }
}

@Composable
private fun HeroCard() {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .shadow(
                elevation = 12.dp,
                shape = RoundedCornerShape(24.dp),
                spotColor = Color(0xFFE53935).copy(alpha = 0.2f)
            ),
        shape = RoundedCornerShape(24.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color.Transparent
        )
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    brush = Brush.linearGradient(
                        colors = listOf(
                            Color(0xFFE53935),
                            Color(0xFFD32F2F),
                            Color(0xFFC62828)
                        )
                    )
                )
                .padding(24.dp)
        ) {
            Column(
                verticalArrangement = Arrangement.spacedBy(12.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "ü©∏",
                    fontSize = 48.sp
                )
                Text(
                    text = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶ú‡ßÄ‡¶¨‡¶® ‡¶¨‡¶æ‡¶Å‡¶ö‡¶æ‡¶®",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.ExtraBold,
                    color = Color.White,
                    letterSpacing = 0.5.sp
                )
                Text(
                    text = "‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶® ‡¶§‡¶ø‡¶®‡¶ü‡¶ø ‡¶ú‡ßÄ‡¶¨‡¶® ‡¶¨‡¶æ‡¶Å‡¶ö‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá",
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color.White.copy(alpha = 0.9f),
                    fontWeight = FontWeight.Medium
                )
            }
        }
    }
}

@Composable
private fun ExpandableSection(
    title: String,
    icon: ImageVector,
    gradientColors: List<Color>,
    items: List<String>,
    expanded: Boolean,
    onToggle: () -> Unit
) {
    val rotationAngle by animateFloatAsState(
        targetValue = if (expanded) 180f else 0f,
        animationSpec = tween(300),
        label = "rotation"
    )

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .animateContentSize(),
        shape = RoundedCornerShape(20.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 4.dp
        )
    ) {
        Column {
            // Header
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { onToggle() }
                    .padding(20.dp),
                horizontalArrangement = Arrangement.spacedBy(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(48.dp)
                        .background(
                            brush = Brush.linearGradient(gradientColors),
                            shape = RoundedCornerShape(14.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = icon,
                        contentDescription = null,
                        tint = Color.White,
                        modifier = Modifier.size(24.dp)
                    )
                }

                Text(
                    text = title,
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.weight(1f)
                )

                Surface(
                    color = gradientColors[0].copy(alpha = 0.1f),
                    shape = CircleShape,
                    modifier = Modifier.size(36.dp)
                ) {
                    Box(
                        contentAlignment = Alignment.Center,
                        modifier = Modifier.fillMaxSize()
                    ) {
                        Icon(
                            imageVector = Icons.Default.KeyboardArrowDown,
                            contentDescription = null,
                            tint = gradientColors[0],
                            modifier = Modifier
                                .size(24.dp)
                                .rotate(rotationAngle)
                        )
                    }
                }
            }

            // Expandable Content
            AnimatedVisibility(
                visible = expanded,
                enter = expandVertically() + fadeIn(),
                exit = shrinkVertically() + fadeOut()
            ) {
                Column(
                    modifier = Modifier.padding(start = 20.dp, end = 20.dp, bottom = 20.dp),
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(1.dp)
                            .background(
                                Brush.horizontalGradient(
                                    colors = listOf(
                                        Color.Transparent,
                                        gradientColors[0].copy(alpha = 0.3f),
                                        Color.Transparent
                                    )
                                )
                            )
                    )

                    items.forEachIndexed { index, item ->
                        ChecklistItem(
                            text = item,
                            number = index + 1,
                            accentColor = gradientColors[0]
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun ChecklistItem(
    text: String,
    number: Int,
    accentColor: Color
) {
    Row(
        horizontalArrangement = Arrangement.spacedBy(12.dp),
        verticalAlignment = Alignment.Top
    ) {
        Surface(
            color = accentColor.copy(alpha = 0.12f),
            shape = CircleShape,
            modifier = Modifier.size(28.dp)
        ) {
            Box(
                contentAlignment = Alignment.Center,
                modifier = Modifier.fillMaxSize()
            ) {
                Text(
                    text = number.toString(),
                    style = MaterialTheme.typography.labelMedium,
                    color = accentColor,
                    fontWeight = FontWeight.Bold
                )
            }
        }

        Text(
            text = text,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurface,
            lineHeight = 22.sp,
            modifier = Modifier.weight(1f)
        )
    }
}

@Composable
private fun HealthBenefitsSection() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(20.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 4.dp
        )
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Row(
                horizontalArrangement = Arrangement.spacedBy(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(48.dp)
                        .background(
                            brush = Brush.linearGradient(
                                colors = listOf(
                                    Color(0xFF9C27B0),
                                    Color(0xFFBA68C8)
                                )
                            ),
                            shape = RoundedCornerShape(14.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Outlined.Favorite,
                        contentDescription = null,
                        tint = Color.White,
                        modifier = Modifier.size(24.dp)
                    )
                }

                Text(
                    text = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶â‡¶™‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold
                )
            }

            Column(
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                BenefitCard(
                    icon = "‚ù§Ô∏è",
                    title = "‡¶π‡ßÉ‡¶¶‡¶Ø‡¶®‡ßç‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø",
                    description = "‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶® ‡¶π‡ßÉ‡¶¶‡¶Ø‡¶®‡ßç‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶π‡¶æ‡¶∞‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ï‡ßá‡¶∞ ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø ‡¶ï‡¶Æ‡¶æ‡¶Ø‡¶º‡•§",
                    gradientColors = listOf(Color(0xFFE91E63), Color(0xFFF48FB1))
                )

                BenefitCard(
                    icon = "üõ°Ô∏è",
                    title = "‡¶∞‡¶ï‡ßç‡¶§‡ßá‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß",
                    description = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶® hemochromatosis (‡¶Ü‡¶Ø‡¶º‡¶∞‡¶® ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≤‡ßã‡¶°) ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§",
                    gradientColors = listOf(Color(0xFF9C27B0), Color(0xFFBA68C8))
                )

                BenefitCard(
                    icon = "üîÑ",
                    title = "‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ï‡ßç‡¶§‡¶ï‡¶£‡¶ø‡¶ï‡¶æ ‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶®",
                    description = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶∂‡¶∞‡ßÄ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ï‡ßç‡¶§‡¶ï‡¶£‡¶ø‡¶ï‡¶æ ‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶® ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶æ ‡¶∂‡¶∞‡ßÄ‡¶∞‡¶ï‡ßá ‡¶∏‡¶§‡ßá‡¶ú ‡¶ì ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∞‡¶æ‡¶ñ‡ßá‡•§",
                    gradientColors = listOf(Color(0xFF00BCD4), Color(0xFF4DD0E1))
                )

                BenefitCard(
                    icon = "üî•",
                    title = "‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶∞‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶®",
                    description = "‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡¶æ‡¶∞ ‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º ‡ß¨‡ß´‡ß¶ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶∞‡¶ø ‡¶ñ‡¶∞‡¶ö ‡¶π‡¶Ø‡¶º ‡¶Ø‡¶æ ‡¶ì‡¶ú‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£‡ßá ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§",
                    gradientColors = listOf(Color(0xFFFF9800), Color(0xFFFFB74D))
                )
            }
        }
    }
}

@Composable
private fun BenefitCard(
    icon: String,
    title: String,
    description: String,
    gradientColors: List<Color>
) {
    Surface(
        color = gradientColors[0].copy(alpha = 0.08f),
        shape = RoundedCornerShape(16.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text(
                text = icon,
                fontSize = 32.sp
            )

            Column(
                verticalArrangement = Arrangement.spacedBy(6.dp),
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    color = gradientColors[0]
                )
                Text(
                    text = description,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    lineHeight = 20.sp
                )
            }
        }
    }
}

@Composable
private fun EligibilityCriteriaSection() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(20.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 4.dp
        )
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Row(
                horizontalArrangement = Arrangement.spacedBy(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(48.dp)
                        .background(
                            brush = Brush.linearGradient(
                                colors = listOf(
                                    Color(0xFF00BCD4),
                                    Color(0xFF4DD0E1)
                                )
                            ),
                            shape = RoundedCornerShape(14.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Outlined.CheckCircle,
                        contentDescription = null,
                        tint = Color.White,
                        modifier = Modifier.size(24.dp)
                    )
                }

                Text(
                    text = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold
                )
            }

            Column(
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                EligibilityItem(
                    icon = Icons.Outlined.Cake,
                    text = "‡¶¨‡¶Ø‡¶º‡¶∏ ‡ßß‡ßÆ ‡¶•‡ßá‡¶ï‡ßá ‡ß¨‡ß¶ ‡¶¨‡¶õ‡¶∞ (‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡ßß‡ß¨-‡ßß‡ß≠ ‡¶¨‡¶õ‡¶∞ ‡¶¨‡¶Ø‡¶º‡¶∏‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶æ‡¶¨‡¶æ-‡¶Æ‡¶æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶§‡¶ø ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶Ø‡¶º)",
                    color = Color(0xFF00BCD4)
                )
                EligibilityItem(
                    icon = Icons.Outlined.FitnessCenter,
                    text = "‡¶∂‡¶æ‡¶∞‡ßÄ‡¶∞‡¶ø‡¶ï ‡¶ì‡¶ú‡¶® ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß™‡ß´ ‡¶ï‡ßá‡¶ú‡¶ø",
                    color = Color(0xFF4CAF50)
                )
                EligibilityItem(
                    icon = Icons.Outlined.HealthAndSafety,
                    text = "‡¶∏‡ßÅ‡¶∏‡ßç‡¶• ‡¶∂‡¶æ‡¶∞‡ßÄ‡¶∞‡¶ø‡¶ï ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßã‡¶®‡ßã ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞ ‡¶∞‡ßã‡¶ó ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶æ",
                    color = Color(0xFFE91E63)
                )
                EligibilityItem(
                    icon = Icons.Outlined.Science,
                    text = "Hemoglobin ‡¶™‡ßÅ‡¶∞‡ßÅ‡¶∑‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø 12.5 g/dL ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø 12.0 g/dL",
                    color = Color(0xFF9C27B0)
                )
                EligibilityItem(
                    icon = Icons.Outlined.MedicalServices,
                    text = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶Ü‡¶ó‡ßá ‡ß© ‡¶Æ‡¶æ‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶°‡¶º ‡¶Ö‡¶∏‡ßç‡¶§‡ßç‡¶∞‡ßã‡¶™‡¶ö‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ",
                    color = Color(0xFFFF9800)
                )
                EligibilityItem(
                    icon = Icons.Outlined.Block,
                    text = "‡¶ó‡¶§ ‡ß¨ ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡ßÅ ‡¶¨‡¶æ ‡¶™‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞‡¶∏‡¶ø‡¶Ç ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ",
                    color = Color(0xFFF44336)
                )
            }
        }
    }
}

@Composable
private fun EligibilityItem(
    icon: ImageVector,
    text: String,
    color: Color
) {
    Row(
        horizontalArrangement = Arrangement.spacedBy(12.dp),
        verticalAlignment = Alignment.Top
    ) {
        Surface(
            color = color.copy(alpha = 0.12f),
            shape = RoundedCornerShape(10.dp),
            modifier = Modifier.size(36.dp)
        ) {
            Box(
                contentAlignment = Alignment.Center,
                modifier = Modifier.fillMaxSize()
            ) {
                Icon(
                    imageVector = icon,
                    contentDescription = null,
                    tint = color,
                    modifier = Modifier.size(20.dp)
                )
            }
        }

        Text(
            text = text,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurface,
            lineHeight = 22.sp,
            modifier = Modifier.weight(1f)
        )
    }
}

@Composable
private fun PatientFamilyGuideSection() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(20.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 4.dp
        )
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Row(
                horizontalArrangement = Arrangement.spacedBy(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(48.dp)
                        .background(
                            brush = Brush.linearGradient(
                                colors = listOf(
                                    Color(0xFF673AB7),
                                    Color(0xFF9575CD)
                                )
                            ),
                            shape = RoundedCornerShape(14.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Outlined.FamilyRestroom,
                        contentDescription = null,
                        tint = Color.White,
                        modifier = Modifier.size(24.dp)
                    )
                }

                Text(
                    text = "‡¶∞‡ßã‡¶ó‡ßÄ‡¶∞ ‡¶∏‡ßç‡¶¨‡¶ú‡¶®‡ßá‡¶∞ ‡¶ï‡¶∞‡¶£‡ßÄ‡¶Ø‡¶º",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold
                )
            }

            Surface(
                color = Color(0xFF673AB7).copy(alpha = 0.08f),
                shape = RoundedCornerShape(16.dp)
            ) {
                Text(
                    text = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶§‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶® ‡¶ì ‡¶ï‡ßÉ‡¶§‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§‡•§ ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®, ‡¶§‡¶æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶ú‡¶®‡ßá‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶® ‡¶¨‡¶æ‡¶Å‡¶ö‡¶æ‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶õ‡ßá‡¶®‡•§",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurface,
                    lineHeight = 22.sp,
                    modifier = Modifier.padding(16.dp)
                )
            }

            Text(
                text = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶§‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º:",
                style = MaterialTheme.typography.titleSmall,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF673AB7)
            )

            Column(
                verticalArrangement = Arrangement.spacedBy(10.dp)
            ) {
                GuideItem("‡¶∏‡¶¶‡¶æ‡¶ö‡¶∞‡¶£ ‡¶ì ‡¶ï‡ßÉ‡¶§‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®")
                GuideItem("‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶ú‡¶æ‡¶®‡¶æ‡¶®")
                GuideItem("‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶≤‡ßá ‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶® ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ø‡¶æ‡¶§‡¶æ‡¶Ø‡¶º‡¶æ‡¶§‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®")
                GuideItem("‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡ßá ‡¶¶‡¶æ‡¶§‡¶æ‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶ñ‡¶¨‡¶∞ ‡¶®‡¶ø‡¶®")
            }

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶§‡¶æ‡¶ï‡ßá ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡¶æ:",
                style = MaterialTheme.typography.titleSmall,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF673AB7)
            )

            Column(
                verticalArrangement = Arrangement.spacedBy(10.dp)
            ) {
                GuideItem("‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
                GuideItem("‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡ßá ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶ì ‡¶™‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®")
                GuideItem("‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßá ‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶§‡¶æ‡¶∞ ‡¶Ø‡¶æ‡¶§‡¶æ‡¶Ø‡¶º‡¶æ‡¶§‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®")
                GuideItem("‡¶∞‡¶ï‡ßç‡¶§‡¶¶‡¶æ‡¶® ‡¶∂‡ßá‡¶∑‡ßá ‡¶¶‡¶æ‡¶§‡¶æ‡¶ï‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶∞‡¶æ‡¶Æ ‡¶®‡¶ø‡¶§‡ßá ‡¶â‡ßé‡¶∏‡¶æ‡¶π‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®")
            }
        }
    }
}

@Composable
private fun GuideItem(text: String) {
    Row(
        horizontalArrangement = Arrangement.spacedBy(10.dp),
        verticalAlignment = Alignment.Top
    ) {
        Box(
            modifier = Modifier
                .size(6.dp)
                .offset(y = 8.dp)
                .background(
                    Color(0xFF673AB7),
                    CircleShape
                )
        )

        Text(
            text = text,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            lineHeight = 22.sp,
            modifier = Modifier.weight(1f)
        )
    }
}

