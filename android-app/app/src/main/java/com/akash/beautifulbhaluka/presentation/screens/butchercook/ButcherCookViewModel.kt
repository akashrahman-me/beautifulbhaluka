package com.akash.beautifulbhaluka.presentation.screens.butchercook

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch

class ButcherCookViewModel : ViewModel() {

    private val _uiState = MutableStateFlow(ButcherCookUiState())
    val uiState: StateFlow<ButcherCookUiState> = _uiState.asStateFlow()

    init {
        onAction(ButcherCookAction.LoadData)
    }

    fun onAction(action: ButcherCookAction) {
        when (action) {
            is ButcherCookAction.LoadData -> loadData()
            is ButcherCookAction.SearchQueryChanged -> updateSearchQuery(action.query)
            is ButcherCookAction.TypeFilterChanged -> updateTypeFilter(action.type)
            is ButcherCookAction.SearchExpandedChanged -> updateSearchExpanded(action.expanded)
            is ButcherCookAction.CallNumber -> {
                // Handle phone call action - can be implemented later
            }
        }
    }

    private fun loadData() {
        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true) }

            try {
                val butcherCooks = listOf(
                    ButcherCook("ЁЯРД", "ржирзБрж░рзБрж▓ ржЗрж╕рж▓рж╛ржо", "01709158834", "рждрж╛ржорж╛ржЯ ржмрж╛ржЬрж╛рж░", "ржХрж╕рж╛ржЗ"),
                    ButcherCook(
                        "ЁЯРД",
                        "рж▓рзБрзОржлрж░ рж░рж╣ржорж╛ржи",
                        "01762152244",
                        "ржирж╛рж░рж╛ржЩрзНржЧрж┐ ржЙржерзБрж░рж╛, ржнрж╛рж▓рзБржХрж╛",
                        "ржХрж╕рж╛ржЗ"
                    ),
                    ButcherCook("ЁЯзСтАНЁЯН│", "ржЬрж╣рж┐рж░", "01709158834", "ржнрж╛рж▓рзБржХрж╛", "ржмрж╛ржмрзБрж░рзНржЪрж┐"),
                    ButcherCook(
                        "ЁЯРД",
                        "рждрж╛рж░рж╛ ржорж┐ржпрж╝рж╛ ( рждрж╛рж░рзЗржХ )",
                        "рзжрззрзнрзкрзлрзпрзнрзжрзлрзйрзк",
                        "ржнрж╛рж▓рзБржХрж╛ ржЙржкржЬрзЗрж▓рж╛ рж╕рзНржмрж╛рж╕рзНржерзНржп ржХржоржкрзНрж▓рзЗржХрзНрж╕ рж░рзЛржб, ржмрзНрж░рж┐ржЬ ржорзЛржбрж╝ ржПред рж╢рж╛рж╣ржЬрж╛рж▓рж╛рж▓ ржЧрзЛрж╕рзНрждрзЛ ржмрж┐рждрж╛ржиред",
                        "ржХрж╕рж╛ржЗ"
                    ),
                    ButcherCook("ЁЯзСтАНЁЯН│", "ржЬрзБржпрж╝рзЗрж▓", "+880 1720-043197", "ржорзЗржжрж┐рж▓рж╛", "ржмрж╛ржмрзБрж░рзНржЪрж┐"),
                    ButcherCook("ЁЯРД", "Mazahar", "+8801847871258", "ржорзБржЫрж╛рж░ ржнрж┐ржЯрж╛", "ржХрж╕рж╛ржЗ"),
                    ButcherCook("ЁЯРД", "рж╕рж╛ржЗржжрзБрж░ ржХрж╕рж╛ржЗ", "+880 1716-854285", "ржЬрж╛ржорзБрж░ ржнрж┐ржЯрж╛", "ржХрж╕рж╛ржЗ"),
                    ButcherCook("ЁЯРД", "ржЖржГ ржорждрж┐ржи", "01731151630", "ржмрж░ржЯрж┐рж▓рж╛, ржХрж▓рзЗржЬ ржмрж╛ржЬрж╛рж░", "ржХрж╕рж╛ржЗ"),
                    ButcherCook("ЁЯзСтАНЁЯН│", "ржорзЛ:ржЙржЬрзНржЬрж▓ ржорж┐ржпрж╝рж╛", "01791952018", "рж░рж╛ржЬрзИ ржнрж╛рж▓рзБржХрж╛", "ржмрж╛ржмрзБрж░рзНржЪрж┐"),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛржГ ржЖржмрзНржжрзБрж▓ рж╣рж╛ржорж┐ржж",
                        "01708446664",
                        "ржЧрзНрж░рж╛ржо:ржирж┐ржЭрзБрж░рзА, ржЗржЙржирж┐ржпрж╝ржи:ржорзЗржжрзБржпрж╝рж╛рж░рж┐",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржЦрзЛрж░рж╢рзЗржж ржЖрж▓ржо ржЦрж╕рж░рзБ",
                        "рзжрззрзнрзорзйрзорзжрзпрзнрзорзи",
                        "ржЖржЩрзНржЧрж╛рж░ржЧрж╛ржбрж╝рж╛, ржЗрж╕рзНрждрж╛рж░ржШрж╛ржЯ, ржбрж╛ржХрж╛рждрж┐ржпрж╝рж╛, ржнрж╛рж▓рзБржХрж╛ред",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржХрж╛рж▓рж╛ржо ржмрж╛ржмрзБрж░рзНржЪрж┐",
                        "рзжрззрзпрзмрзжрззрзжрзпрзирзкрзп",
                        "ржХрж╛рж╢рж░ рж╣ржмрж┐рж░ржмрж╛ржбрж╝рж┐ ржнрж╛рж▓рзБржХрж╛ ржоржпрж╝ржоржирж╕рж┐ржВрж╣",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook("ЁЯзСтАНЁЯН│", "ржорзЛ ржлрж┐рж░рзЛржЬ ржорж┐ржпрж╝рж╛", "рзжрззрзнрзнрззрзпрзжрзпрзирззрзз", "ржкрзБрж░рзБрж░рж╛", "ржмрж╛ржмрзБрж░рзНржЪрж┐"),
                    ButcherCook(
                        "ЁЯРД",
                        "рж╕рж┐рж░рж╛ржЬрзБрж▓ ржЗрж╕рж▓рж╛ржо (рж╕рж┐рж░рзБ)",
                        "+8801722260268",
                        "ржЬрж┐ржмржирждрж▓рж╛,рж╣ржмрж┐рж░ржмрж╛ржбрж╝рзА,ржнрж╛рж▓рзБржХрж╛,ржоржпрж╝ржоржирж╕рж┐ржВрж╣",
                        "ржХрж╕рж╛ржЗ"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛ ржирзБрж░рзБрж▓ ржЗрж╕рж▓рж╛ржо",
                        "01737575740",
                        "ржмрж╛ржБрж╢рж┐рж▓ ржнрж╛рж▓рзБржХрж╛",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "рж░ржирж┐ , ржорж╛рж╣рж┐ржо, ржУржпрж╝рж╛рж▓рж┐ржж, рж░рзБржжрзНрж░",
                        "01618062549",
                        "ржмрж╛ржБрж╢рзАрж▓",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯРД",
                        "рж╕рзЗрж▓рж┐ржо ржХрж╕рж╛ржЗ",
                        "01776541458",
                        "ржорзЗржжрзБржпрж╝рж╛рж░рзА, ржнрж╛рж▓рзБржХрж╛ред ржорж╛ржВрж╕рж╛ ржХрж╛ржЯрж╛рж░ ржЬржирзНржп ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред",
                        "ржХрж╕рж╛ржЗ"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛржГ ржЦрж╛ржЗрж░рзБрж▓ ржЗрж╕рж▓рж╛ржо (рж╣рж╛ржХрзНржХрзБрж▓)",
                        "01720-450867",
                        "ржирж╛рж░рж╛ржЩрзНржЧрзА, рззржиржВ ржЙржерзБрж░рж╛ ржЗржЙржирж┐ржпрж╝ржи, ржнрж╛рж▓рзБржХрж╛, ржоржпрж╝ржоржирж╕рж┐ржВрж╣ред",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛржГ рж╕рж╛ржЗржлрзБрж▓ ржЗрж╕рж▓рж╛ржо",
                        "01776-622330",
                        "ржорзЗржиржЬрзЗржирж╛, рззржиржВ ржЙржерзБрж░рж╛ ржЗржЙржирж┐ржпрж╝ржи, ржнрж╛рж▓рзБржХрж╛, ржоржпрж╝ржоржирж╕рж┐ржВрж╣ред",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛржГ рж╕рж╛ржЗржжрзБрж▓ ржЗрж╕рж▓рж╛ржо",
                        "01716616697",
                        "ржирж╛рж░рж╛ржЩрзНржЧрзА, рззржиржВ ржЙржерзБрж░рж╛ ржЗржЙржирж┐ржпрж╝ржи, ржнрж╛рж▓рзБржХрж╛, ржоржпрж╝ржоржирж╕рж┐ржВрж╣ред",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржЖржмржжрзБрж▓ ржЦрж╛рж▓рзЗржХ",
                        "01760-309751",
                        "ржзрж╛ржЗрж░рж╛ржкрж╛ржбрж╝рж╛ ржнрж╛рж▓рзБржХрж╛",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook("ЁЯзСтАНЁЯН│", "ржЬрж╛ржорж╛ржи ржЦрж╛ржи", "+8801795010248", "рж╕рж╛рждрзЗржВржЧрж╛ ржнрж╛рж▓рзБржХрж╛", "ржмрж╛ржмрзБрж░рзНржЪрж┐"),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржЖржЬрж┐ржЬрзБрж▓ рж╣ржХ ( ржнрж╛рж▓рзБржХрж╛ ржкрж╛ржЗрж▓ржЯ рж╕рзНржХрзБрж▓рзЗрж░ ржЪрждрзБрж░рзНрже рж╢рзНрж░рзЗржгрзАрж░ ржХрж░рзНржоржЪрж╛рж░рзА )",
                        "01312-910785",
                        "ржнрж╛рж▓рзБржХрж╛ ржкрзМрж░рж╕ржнрж╛ рзз ржиржВ ржУржпрж╝рж╛рж░рзНржб ржХрзЛржЯржнржмржи",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛржГ рждрзЛрждрж╛ ржорж┐ржпрж╝рж╛",
                        "+880 1731-208782",
                        "рж╕рж┐ржбрж╖рзНржЯрзЛрж░ ржмрж╛ржЬрж╛рж░ (рж╣ржмрж┐рж░ржмрж╛ржбрж╝рзА)",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛржГ ржЖржЗржирзВрж▓ рж╣ржХ",
                        "+880 1929-830450",
                        "рж╕рж┐ржбрж╖рзНржЯрзЛрж░ ржмрж╛ржЬрж╛рж░ (рж╣ржмрж┐рж░ржмрж╛ржбрж╝рзА)",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook("ЁЯРД", "рж╕ржмрзБржЬ ржЦрж╛ржи", "01730162737", "ржнрж╛рж▓рзБржХрж╛ ржмрж╛ржЬрж╛рж░", "ржХрж╕рж╛ржЗ"),
                    ButcherCook(
                        "ЁЯРД",
                        "ржорзЛржГ рж╕ржмрзБржЬ ржЦрж╛ржи",
                        "рзжрззрзн рзйрзжрззрзмрзирзнрзйрзн",
                        "ржорж╛ ржПрж░ ржжрзБржпрж╝рж╛ ржорж╛ржВрж╕ ржмрж┐рждрж░ржг ред ржнрж╛рж▓рзБржХрж╛ ржоржзрзНржп ржмрж╛ржЬрж╛рж░ред",
                        "ржХрж╕рж╛ржЗ"
                    ),
                    ButcherCook("ЁЯзСтАНЁЯН│", "ржЖрж░рж┐ржл рж╕рж░ржХрж╛рж░", "+8801978-638797", "ржХрж╛ржЪрж┐ржирж╛ ржмрж╛ржЬрж╛рж░", "ржмрж╛ржмрзБрж░рзНржЪрж┐"),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржЬржмрзНржмрж╛рж░ ржмрж╛ржмрзБржЪрж┐",
                        "01733418468",
                        "рзнржиржВ ржУржпрж╝рж╛рж░рзНржб ржЯрж┐ржиржЯрж┐ рж░рзЛржб ржнрж╛рж▓рзБржХрж╛",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛ ржоржпрж╝ржЬрзБржжрзНржжрж┐ржи",
                        "рзжрззрзнрззрзпрзжрзнрзпрзпрзмрзж",
                        "рж╕рж┐ржбрж┐рж╕рзНржЯрзБрж░ ржмрж╛ржЬрж╛рж░",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛ ржоржпрж╝ржЬрзБржжрзНржжрж┐ржи ржмрж╛ржмрзБрж░рзНржЪрж┐",
                        "рзжрззрзнрззрзпрзжрзнрзпрзпрзмрзж",
                        "рззрзж ржиржВ рж╣ржмрж┐рж░ ржмрж╛ржбрж╝рзА ржЗржЙржирж┐ржпрж╝ржи рж╕рж┐ржбрж┐рж╕рзНржЯрзБрж░ ржЬрж┐ржмржи рждрж▓рж╛",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯзСтАНЁЯН│",
                        "ржорзЛржГ рж╢рж╛рж╣рзАржи ржорж┐ржпрж╝рж╛",
                        "01737984779",
                        "ржорзЗржжрзБржпрж╝рж╛рж░рзА, ржнрж╛рж▓рзБржХрж╛ ржоржпрж╝ржоржирж╕рж┐ржВрж╣",
                        "ржмрж╛ржмрзБрж░рзНржЪрж┐"
                    ),
                    ButcherCook(
                        "ЁЯРД",
                        "ржорзЛ: ржЖрж╕рж╛ржжрзБрж▓ ржЗрж╕рж▓рж╛ржо",
                        "01773338795",
                        "ржХрж╛рж╖рж░ ржЪрзМрж░рж╛рж╕рзНрждрж╛, ржнрж╛рж▓рзБржХрж╛ ,ржоржпрж╝ржоржирж╕рж┐ржВрж╣",
                        "ржХрж╕рж╛ржЗ"
                    )
                )

                _uiState.update {
                    it.copy(
                        isLoading = false,
                        butcherCooks = butcherCooks,
                        filteredButcherCooks = butcherCooks
                    )
                }
            } catch (e: Exception) {
                _uiState.update {
                    it.copy(isLoading = false, error = e.message)
                }
            }
        }
    }

    private fun updateSearchQuery(query: String) {
        _uiState.update { it.copy(searchQuery = query) }
        filterData()
    }

    private fun updateTypeFilter(type: ButcherCookType) {
        _uiState.update { it.copy(selectedType = type) }
        filterData()
    }

    private fun updateSearchExpanded(expanded: Boolean) {
        _uiState.update { it.copy(isSearchExpanded = expanded) }
    }

    private fun filterData() {
        val currentState = _uiState.value
        val query = currentState.searchQuery.lowercase()
        val type = currentState.selectedType

        val filtered = currentState.butcherCooks.filter { butcherCook ->
            val matchesSearch = query.isEmpty() ||
                    butcherCook.name.lowercase().contains(query) ||
                    butcherCook.address.lowercase().contains(query) ||
                    butcherCook.type.lowercase().contains(query)

            val matchesType = type == ButcherCookType.ALL || butcherCook.type == type.value

            matchesSearch && matchesType
        }

        _uiState.update { it.copy(filteredButcherCooks = filtered) }
    }
}
